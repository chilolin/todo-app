[{"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\index.tsx":"1","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\reportWebVitals.ts":"2","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\App.tsx":"3","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\containers\\templates\\Todo.tsx":"4","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\firebase.utils.ts":"5","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\containers\\organisms\\CreateForm.tsx":"6","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\containers\\organisms\\UpdateForm.tsx":"7","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\containers\\organisms\\TaskBoard.tsx":"8","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\molecules\\Spinner\\Spinner.tsx":"9","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\organisms\\UpdateForm.tsx":"10","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\organisms\\CreateForm.tsx":"11","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\organisms\\TaskBoard.tsx":"12","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\molecules\\FormInput.tsx":"13","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\containers\\molecules\\TaskItem.tsx":"14","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\molecules\\TaskItem.tsx":"15"},{"size":588,"mtime":1608195724228,"results":"16","hashOfConfig":"17"},{"size":446,"mtime":1607656644024,"results":"18","hashOfConfig":"17"},{"size":326,"mtime":1608135092403,"results":"19","hashOfConfig":"17"},{"size":4993,"mtime":1608254594133,"results":"20","hashOfConfig":"17"},{"size":2496,"mtime":1608255693291,"results":"21","hashOfConfig":"17"},{"size":1380,"mtime":1608186474679,"results":"22","hashOfConfig":"17"},{"size":1972,"mtime":1608172102456,"results":"23","hashOfConfig":"17"},{"size":791,"mtime":1608172421662,"results":"24","hashOfConfig":"17"},{"size":231,"mtime":1608195186136,"results":"25","hashOfConfig":"17"},{"size":1146,"mtime":1608137497937,"results":"26","hashOfConfig":"17"},{"size":926,"mtime":1608133336174,"results":"27","hashOfConfig":"17"},{"size":1049,"mtime":1608172680541,"results":"28","hashOfConfig":"17"},{"size":590,"mtime":1607733203836,"results":"29","hashOfConfig":"17"},{"size":1492,"mtime":1608193988800,"results":"30","hashOfConfig":"17"},{"size":907,"mtime":1608193850038,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"9mthko",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\index.tsx",[],["70","71","72","73","74"],"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\reportWebVitals.ts",[],["75","76","77","78","79"],"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\App.tsx",[],"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\containers\\templates\\Todo.tsx",["80"],"/* eslint-disable no-param-reassign */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { FC, useEffect, useReducer, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { firestore } from 'firebase.utils';\n\nimport TaskBoard from 'containers/organisms/TaskBoard';\nimport CreateForm from 'containers/organisms/CreateForm';\nimport UpdateForm from 'containers/organisms/UpdateForm';\nimport Spinner from 'components/molecules/Spinner/Spinner';\n\nexport type Task = {\n  id: string;\n  title: string;\n  deadline?: string;\n  createdAt: Date;\n};\n\nexport type TaskList = {\n  [id: string]: Task;\n};\n\ntype TodoState = {\n  todoList: TaskList;\n  doneList: TaskList;\n};\n\nconst todoSlice = createSlice({\n  name: 'todo',\n  initialState: { todoList: {}, doneList: {} } as TodoState,\n  reducers: {\n    fetchTodoList: (state, action: PayloadAction<TaskList>) => {\n      state.todoList = action.payload;\n    },\n    fetchDoneList: (state, action: PayloadAction<TaskList>) => {\n      state.doneList = action.payload;\n    },\n    taskCreated: (state, action: PayloadAction<Omit<Task, 'createdAt'>>) => {\n      const { id } = action.payload;\n      const createdAt = new Date();\n      state.todoList[id] = { ...action.payload, id, createdAt };\n    },\n    taskDone: (state, action: PayloadAction<string>) => {\n      const id = action.payload;\n      const task = state.todoList[id];\n\n      if (task) {\n        state.doneList[id] = { ...task };\n        delete state.todoList[id];\n      }\n    },\n    taskTodo: (state, action: PayloadAction<string>) => {\n      const id = action.payload;\n      const task = state.doneList[id];\n\n      if (task) {\n        state.todoList[id] = { ...task };\n        delete state.doneList[id];\n      }\n    },\n    taskUpdated: (state, action: PayloadAction<Omit<Task, 'createdAt'>>) => {\n      const { id, ...data } = action.payload;\n      const task = state.todoList[id];\n\n      if (task) state.todoList[id] = { ...task, ...data };\n    },\n    taskDeleted: (state, action: PayloadAction<string>) => {\n      const id = action.payload;\n      const task = state.todoList[id];\n\n      if (task) delete state.todoList[id];\n    },\n  },\n});\n\nconst Todo: FC<{ initialState: TaskList }> = ({ initialState }) => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [state, dispatch] = useReducer(\n    todoSlice.reducer,\n    initialState,\n    (taskList: TaskList): TodoState => ({\n      todoList: taskList,\n      doneList: taskList,\n    }),\n  );\n  const {\n    fetchTodoList,\n    fetchDoneList,\n    taskCreated,\n    taskDone,\n    taskTodo,\n    taskUpdated,\n    taskDeleted,\n  } = todoSlice.actions;\n\n  useEffect(() => {\n    const fetchTaskLists = async () => {\n      setIsLoading(true);\n      const todoSnapshot = await firestore.collection('todoList').get();\n      const transformedTodo = todoSnapshot.docs\n        .map((doc) => {\n          const { title, deadline, createdAt } = doc.data() as Task;\n\n          return {\n            id: doc.id,\n            title,\n            deadline,\n            createdAt,\n          };\n        })\n        .reduce((accumulator: TaskList, currentValue) => {\n          accumulator[currentValue.id] = currentValue;\n\n          return accumulator;\n        }, {});\n\n      const doneSnapshot = await firestore.collection('doneList').get();\n      const transformedDone = doneSnapshot.docs\n        .map((doc) => {\n          const { title, deadline, createdAt } = doc.data() as Task;\n\n          return {\n            id: doc.id,\n            title,\n            deadline,\n            createdAt,\n          };\n        })\n        .reduce((accumulator: TaskList, currentValue) => {\n          accumulator[currentValue.id] = currentValue;\n\n          return accumulator;\n        }, {});\n\n      return { transformedTodo, transformedDone };\n    };\n\n    fetchTaskLists()\n      .then((taskLists) => {\n        dispatch(fetchTodoList(taskLists.transformedTodo));\n        dispatch(fetchDoneList(taskLists.transformedDone));\n        setIsLoading(false);\n      })\n      .catch((error) => console.error(error));\n  }, [firestore]);\n\n  return isLoading ? (\n    <Spinner />\n  ) : (\n    <Switch>\n      <Route exact path=\"/\">\n        <TaskBoard\n          todoList={state.todoList}\n          doneList={state.doneList}\n          taskDone={(id: string) => dispatch(taskDone(id))}\n          taskTodo={(id: string) => dispatch(taskTodo(id))}\n        />\n      </Route>\n      <Route path=\"/create\">\n        <CreateForm\n          taskCreated={(task: Omit<Task, 'createdAt'>) =>\n            dispatch(taskCreated(task))\n          }\n        />\n      </Route>\n      <Route path=\"/update/:taskId\">\n        <UpdateForm\n          todoList={state.todoList}\n          taskUpdated={(task: Omit<Task, 'createdAt'>) =>\n            dispatch(taskUpdated(task))\n          }\n          taskDeleted={(id: string) => dispatch(taskDeleted(id))}\n        />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default Todo;\n","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\firebase.utils.ts",["81","82","83","84"],"import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nimport { Task } from 'containers/templates/Todo';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBkSvRR-n4_f6cfXF3O8wJ7ojomirereyw',\n  authDomain: 'todo-application-66954.firebaseapp.com',\n  projectId: 'todo-application-66954',\n  storageBucket: 'todo-application-66954.appspot.com',\n  messagingSenderId: '45033628071',\n  appId: '1:45033628071:web:cc534dab587640d7de5682',\n  measurementId: 'G-39VE6Q0BRD',\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseTaskCreated = async (\n  collectionId: string,\n  {\n    title,\n    deadline,\n  }: {\n    title: string;\n    deadline?: string;\n  },\n  taskId?: string,\n): Promise<string> => {\n  const colRef = firestore.collection(`${collectionId}`);\n  const id = taskId || colRef.doc().id;\n  const taskRef = colRef.doc(id);\n  const snapshot = await taskRef.get();\n\n  if (!snapshot.exists) {\n    const createdAt = new Date();\n\n    try {\n      await taskRef.set({\n        id,\n        title,\n        deadline,\n        createdAt,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return id;\n};\n\nexport const firebaseTaskConvert = async (\n  id: string,\n  beforeCollectionId: string,\n  afterCollectionId: string,\n): Promise<void> => {\n  const snapshot = await firestore.doc(`${beforeCollectionId}/${id}`).get();\n  const { title, deadline } = snapshot.data() as Task;\n\n  if (snapshot.exists) {\n    try {\n      await firebaseTaskCreated(afterCollectionId, { title, deadline }, id);\n      await firebaseTaskDeleted(beforeCollectionId, id);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n};\n\nexport const firebaseTaskUpdated = async (\n  collectionId: string,\n  {\n    id,\n    title,\n    deadline,\n  }: {\n    id: string;\n    title: string;\n    deadline?: string;\n  },\n): Promise<void> => {\n  const taskRef = firestore.doc(`${collectionId}/${id}`);\n  const snapshot = await taskRef.get();\n\n  if (snapshot.exists) {\n    try {\n      await taskRef.update({\n        title,\n        deadline,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\n\nexport const firebaseTaskDeleted = async (\n  collectionId: string,\n  id: string,\n): Promise<void> => {\n  const taskRef = firestore.doc(`${collectionId}/${id}`);\n  const snapshot = await taskRef.get();\n\n  if (snapshot.exists) {\n    try {\n      await taskRef.delete();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\n\nexport const firestore = firebase.firestore();\n\nexport default firebase;\n","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\containers\\organisms\\CreateForm.tsx",["85"],"import React, { FC, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { firebaseTaskCreated } from 'firebase.utils';\n\nimport CreateForm from 'components/organisms/CreateForm';\n\nimport { Task } from 'containers/templates/Todo';\n\nconst EnhancedCreateForm: FC<{\n  taskCreated: (task: Omit<Task, 'createdAt'>) => void;\n}> = ({ taskCreated = () => undefined }) => {\n  const [createdTask, setCreatedTask] = useState<{\n    title: string;\n    deadline: string;\n  }>({\n    title: '',\n    deadline: '',\n  });\n  const history = useHistory();\n\n  const taskCreatedHandleSubmit: (\n    e: React.FormEvent<HTMLFormElement>,\n  ) => void = async (e) => {\n    e.preventDefault();\n    try {\n      const id = await firebaseTaskCreated('todoList', createdTask);\n      taskCreated({ id, ...createdTask });\n      history.push('/');\n      setCreatedTask({\n        title: '',\n        deadline: '',\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void = (\n    e,\n  ) => {\n    e.preventDefault();\n    const { name, value } = e.target;\n\n    setCreatedTask({ ...createdTask, [name]: value });\n  };\n\n  const { title, deadline } = createdTask;\n\n  return (\n    <CreateForm\n      {...{ title, deadline, taskCreatedHandleSubmit, handleChange }}\n    />\n  );\n};\n\nexport default EnhancedCreateForm;\n","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\containers\\organisms\\UpdateForm.tsx",["86","87"],"import React, { FC, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { firebaseTaskUpdated, firebaseTaskDeleted } from 'firebase.utils';\n\nimport UpdateForm from 'components/organisms/UpdateForm';\n\nimport { Task, TaskList } from 'containers/templates/Todo';\n\ntype Props = {\n  todoList: TaskList;\n  taskUpdated: (task: Omit<Task, 'createdAt'>) => void;\n  taskDeleted: (id: string) => void;\n};\n\nconst EnhancedUpdateForm: FC<Props> = ({\n  todoList = {},\n  taskUpdated = () => undefined,\n  taskDeleted = () => undefined,\n}) => {\n  const { taskId } = useParams<{ taskId: string }>();\n  const [updatedTask, setUpdatedTask] = useState<{\n    title: string;\n    deadline?: string;\n  }>({\n    title: todoList[taskId]?.title,\n    deadline: todoList[taskId]?.deadline,\n  });\n  const history = useHistory();\n\n  const taskUpdatedHandleSubmit: (\n    e: React.FormEvent<HTMLFormElement>,\n  ) => void = async (e) => {\n    e.preventDefault();\n    try {\n      await firebaseTaskUpdated('todoList', { id: taskId, ...updatedTask });\n      taskUpdated({ id: taskId, ...updatedTask });\n      history.push('/');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const taskDeletedHandleClick: (\n    e: React.MouseEvent<HTMLButtonElement>,\n  ) => void = async (e) => {\n    e.preventDefault();\n    try {\n      await firebaseTaskDeleted('todoList', taskId);\n      taskDeleted(taskId);\n      history.push('/');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void = (\n    e,\n  ) => {\n    e.preventDefault();\n    const { name, value } = e.target;\n\n    setUpdatedTask({ ...updatedTask, [name]: value });\n  };\n\n  const { title, deadline } = updatedTask;\n\n  return (\n    <UpdateForm\n      {...{\n        title,\n        deadline,\n        taskUpdatedHandleSubmit,\n        taskDeletedHandleClick,\n        handleChange,\n      }}\n    />\n  );\n};\n\nexport default EnhancedUpdateForm;\n","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\containers\\organisms\\TaskBoard.tsx",[],"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\molecules\\Spinner\\Spinner.tsx",[],"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\organisms\\UpdateForm.tsx",[],"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\organisms\\CreateForm.tsx",[],"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\organisms\\TaskBoard.tsx",[],"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\molecules\\FormInput.tsx",[],"C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\containers\\molecules\\TaskItem.tsx",["88","89"],"import React, { FC, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { firebaseTaskConvert } from 'firebase.utils';\n\nimport TaskItem from 'components/molecules/TaskItem';\n\ntype Props = {\n  id: string;\n  title: string;\n  deadline: string;\n  isDone?: boolean;\n  taskDone?: (id: string) => void;\n  taskTodo?: (id: string) => void;\n};\n\nconst EnhancedTaskItem: FC<Props> = ({\n  id = '',\n  title = '',\n  deadline = '',\n  isDone = false,\n  taskDone = () => undefined,\n  taskTodo = () => undefined,\n}) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const history = useHistory();\n\n  const toUpdatePageHandleClick = () => {\n    history.push(`/update/${id}`);\n  };\n\n  const taskDoneHandleClick = async () => {\n    setIsLoading(true);\n    try {\n      await firebaseTaskConvert(id, 'todoList', 'doneList');\n      taskDone(id);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const taskTodoHandleClick = async () => {\n    setIsLoading(true);\n    try {\n      await firebaseTaskConvert(id, 'doneList', 'todoList');\n      taskTodo(id);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return isLoading ? (\n    <div>変更中・・・</div>\n  ) : (\n    <TaskItem\n      {...{\n        title,\n        deadline,\n        isDone,\n        toUpdatePageHandleClick,\n        taskDoneHandleClick,\n        taskTodoHandleClick,\n      }}\n    />\n  );\n};\n\nexport default EnhancedTaskItem;\n","C:\\Users\\yuma\\Desktop\\React\\todo-application\\src\\components\\molecules\\TaskItem.tsx",[],["90","91","92","93","94"],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":145,"column":25,"nodeType":"107","messageId":"108","endLine":145,"endColumn":38},{"ruleId":"105","severity":1,"message":"106","line":45,"column":7,"nodeType":"107","messageId":"108","endLine":45,"endColumn":18},{"ruleId":"105","severity":1,"message":"106","line":65,"column":7,"nodeType":"107","messageId":"108","endLine":65,"endColumn":20},{"ruleId":"105","severity":1,"message":"106","line":92,"column":7,"nodeType":"107","messageId":"108","endLine":92,"endColumn":18},{"ruleId":"105","severity":1,"message":"106","line":108,"column":7,"nodeType":"107","messageId":"108","endLine":108,"endColumn":18},{"ruleId":"105","severity":1,"message":"106","line":34,"column":7,"nodeType":"107","messageId":"108","endLine":34,"endColumn":20},{"ruleId":"105","severity":1,"message":"106","line":39,"column":7,"nodeType":"107","messageId":"108","endLine":39,"endColumn":18},{"ruleId":"105","severity":1,"message":"106","line":52,"column":7,"nodeType":"107","messageId":"108","endLine":52,"endColumn":18},{"ruleId":"105","severity":1,"message":"106","line":38,"column":7,"nodeType":"107","messageId":"108","endLine":38,"endColumn":20},{"ruleId":"105","severity":1,"message":"106","line":49,"column":7,"nodeType":"107","messageId":"108","endLine":49,"endColumn":20},{"ruleId":"95","replacedBy":"109"},{"ruleId":"97","replacedBy":"110"},{"ruleId":"99","replacedBy":"111"},{"ruleId":"101","replacedBy":"112"},{"ruleId":"103","replacedBy":"113"},"lines-around-directive",["114"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected",["114"],[],[],[],[],"padding-line-between-statements"]